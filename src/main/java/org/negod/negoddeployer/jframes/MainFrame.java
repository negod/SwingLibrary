/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.negod.negoddeployer.jframes;

import com.negod.genericlibrary.dto.Dto;
import com.negod.swinglibrary.controller.Application;
import com.negod.swinglibrary.controller.events.NegodEvent;
import com.negod.swinglibrary.controller.events.global.CmdExecuterEvent;
import com.negod.swinglibrary.controller.events.global.ProgressBarEvent;
import com.negod.swinglibrary.controller.jframes.NegodJFrame;
import com.negod.swinglibrary.filehandler.FileUnZipper.FileUnzipData;
import com.negod.swinglibrary.progressbar.NegodProgressBar.NegodProgressBarData;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.negod.negoddeployer.constants.Settings;

/**
 *
 * @author jojoha
 */
public class MainFrame extends NegodJFrame {

    private static final String settingsFile = "Settings";
    Dto<Settings> settings = new Dto(Settings.class);

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
    }

    public void setSettings() {
        try {

            settings = Application.getXmlFileHandler().getXmlFileAsDto(settingsFile);

            if (settings.getValue(Settings.DEPLOY_PATH).isNotNull()) {
                deployPath.setText(settings.<String>get(Settings.DEPLOY_PATH));
            }
            if (settings.getValue(Settings.ZIP_PATH).isNotNull()) {
                zipPath.setText(settings.<String>get(Settings.ZIP_PATH));
            }
            if (settings.getValue(Settings.COMPILE_PATH).isNotNull()) {
                compilePath.setText(settings.<String>get(Settings.COMPILE_PATH));
            }
            if (settings.getValue(Settings.UNZIP).isNotNull()) {
                unZipCheckBox.setSelected(settings.<Boolean>get(Settings.UNZIP));
            }
            if (settings.getValue(Settings.COMPILE).isNotNull()) {
                compileCheckBox.setSelected(settings.<Boolean>get(Settings.COMPILE));
            }

        } catch (Exception ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void updateSettings() {
        try {
            settings = Application.getXmlFileHandler().getXmlFileAsDto(settingsFile);
        } catch (Exception ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        cmdOutputPanel1 = new org.negod.negoddeployer.panels.CmdOutputPanel();
        jPanel3 = new javax.swing.JPanel();
        setDeploypathButton = new javax.swing.JButton();
        compilePathButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        deployPath = new javax.swing.JTextField();
        zipPath = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        setZipPathButton = new javax.swing.JButton();
        compilePath = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        negodProgressBar1 = new com.negod.swinglibrary.progressbar.NegodProgressBar();
        cmdOutputPanel2 = new org.negod.negoddeployer.panels.CmdOutputPanel();
        executeButton = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        clearOutPut = new javax.swing.JCheckBox();
        compileCheckBox = new javax.swing.JCheckBox();
        unZipCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("COPY THA FILES!");

        setDeploypathButton.setText("...");
        setDeploypathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setDeploypathButtonActionPerformed(evt);
            }
        });

        compilePathButton.setText("...");
        compilePathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compilePathButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Path for deploy");

        deployPath.setToolTipText("Choose the path to the glassfish domain");

        zipPath.setToolTipText("Choose the path of the Zip to be deployed");

        jLabel3.setText("Path to Zip-file");

        jLabel2.setText("Compile Path");

        setZipPathButton.setText("...");
        setZipPathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setZipPathButtonActionPerformed(evt);
            }
        });

        compilePath.setToolTipText("Project path (For compiling)");

        jLabel1.setFont(new java.awt.Font("Viner Hand ITC", 0, 24)); // NOI18N
        jLabel1.setText("SUPA DUPA INSPECTION DEPLOY TOOL");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(715, 715, 715))
                            .addComponent(compilePath, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(deployPath, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(zipPath, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(compilePathButton, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(setDeploypathButton, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(setZipPathButton, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(187, 187, 187)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 531, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(zipPath, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setZipPathButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(8, 8, 8)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deployPath, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setDeploypathButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(compilePath, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(compilePathButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addContainerGap())
        );

        executeButton.setText("Say hello to my little friend!");
        executeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeButtonActionPerformed(evt);
            }
        });

        jButton4.setText("Hasta la vista!");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        clearOutPut.setBackground(new java.awt.Color(255, 255, 255));
        clearOutPut.setText("Clear output when saying hello");

        compileCheckBox.setBackground(new java.awt.Color(255, 255, 255));
        compileCheckBox.setText("Compile project");
        compileCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compileCheckBoxActionPerformed(evt);
            }
        });

        unZipCheckBox.setBackground(new java.awt.Color(255, 255, 255));
        unZipCheckBox.setText("UnZip file");
        unZipCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unZipCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(negodProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmdOutputPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(compileCheckBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(unZipCheckBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clearOutPut, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(executeButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cmdOutputPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(executeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(unZipCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(compileCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(clearOutPut)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(negodProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void compileCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compileCheckBoxActionPerformed
        try {
            settings.set(Settings.COMPILE, compileCheckBox.isSelected());
            Application.getXmlFileHandler().createXml(settings, settingsFile);
        } catch (Exception ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_compileCheckBoxActionPerformed

    private void executeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeButtonActionPerformed
        doStuff();
    }//GEN-LAST:event_executeButtonActionPerformed

    private void unZipCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unZipCheckBoxActionPerformed
        try {
            settings.set(Settings.UNZIP, unZipCheckBox.isSelected());
            Application.getXmlFileHandler().createXml(settings, settingsFile);
            updateSettings();
        } catch (Exception ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_unZipCheckBoxActionPerformed

    private void setZipPathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setZipPathButtonActionPerformed
        try {
            settings.set(Settings.ZIP_PATH, Application.getFileChooser().getFilePath());
            Application.getXmlFileHandler().createXml(settings, settingsFile);
            zipPath.setText(settings.<String>get(Settings.ZIP_PATH));
            updateSettings();
        } catch (Exception ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_setZipPathButtonActionPerformed

    private void compilePathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compilePathButtonActionPerformed
        try {
            settings.set(Settings.COMPILE_PATH, Application.getFileChooser().getFolderPath());
            Application.getXmlFileHandler().createXml(settings, settingsFile);
            compilePath.setText(settings.<String>get(Settings.COMPILE_PATH));
            updateSettings();
            if (compileCheckBox.isSelected()) {
                Application.getCmdExecuter().ExecuteCommand(getCommandToExecute());
            }
        } catch (Exception ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_compilePathButtonActionPerformed

    private void setDeploypathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setDeploypathButtonActionPerformed
        try {
            settings.set(Settings.DEPLOY_PATH, Application.getFileChooser().getFolderPath());
            Application.getXmlFileHandler().createXml(settings, settingsFile);
            deployPath.setText(settings.<String>get(Settings.DEPLOY_PATH));
            updateSettings();
        } catch (Exception ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_setDeploypathButtonActionPerformed

    private ProcessBuilder getCommandToExecute() {
        ProcessBuilder builder = new ProcessBuilder("cmd.exe", "/c", "grunt");
        builder.directory(new File(settings.<String>get(Settings.COMPILE_PATH)));
        return builder;
    }

    public void doStuff() {

        Dto<NegodProgressBarData> progressBarData = new Dto<NegodProgressBarData>(NegodProgressBarData.class);
        progressBarData.set(NegodProgressBarData.PROGRESS_TEXT, "Initializing");
        progressBarData.set(NegodProgressBarData.PROGRESS_VALUE, 0);
        Application.getEvents().notifyObservers(ProgressBarEvent.CHANGE_PROGRESS, settings);

        if (clearOutPut.isSelected()) {
            cmdOutputPanel2.clearText();
        }

        if (compileCheckBox.isSelected()) {
            Application.getCmdExecuter().ExecuteCommand(getCommandToExecute());
        }

        if (unZipCheckBox.isSelected() && !compileCheckBox.isSelected()) {
            Dto<FileUnzipData> unzipData = new Dto(FileUnzipData.class);
            unzipData.set(FileUnzipData.FILE_TO_UNZIP, settings.<String>get(Settings.ZIP_PATH));
            unzipData.set(FileUnzipData.UNZIP_FILE_PATH, settings.<String>get(Settings.DEPLOY_PATH));
            Application.getFileUnZipper().UnZipFile(unzipData);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox clearOutPut;
    private org.negod.negoddeployer.panels.CmdOutputPanel cmdOutputPanel1;
    private org.negod.negoddeployer.panels.CmdOutputPanel cmdOutputPanel2;
    private javax.swing.JCheckBox compileCheckBox;
    private javax.swing.JTextField compilePath;
    private javax.swing.JButton compilePathButton;
    private javax.swing.JTextField deployPath;
    private javax.swing.JButton executeButton;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel3;
    private com.negod.swinglibrary.progressbar.NegodProgressBar negodProgressBar1;
    private javax.swing.JButton setDeploypathButton;
    private javax.swing.JButton setZipPathButton;
    private javax.swing.JCheckBox unZipCheckBox;
    private javax.swing.JTextField zipPath;
    // End of variables declaration//GEN-END:variables

    @Override
    public void init() {
        initComponents();
        setSettings();
        cmdOutputPanel2.registerAsObserver();
        negodProgressBar1.registerAsObserver();
    }

    public void update(NegodEvent event) {
        if (event.equalsEvent(CmdExecuterEvent.CMD_COMMAND_EXECUTED_SUCCESS)) {
            Dto<FileUnzipData> fileUnZipData = new Dto<FileUnzipData>(FileUnzipData.class);
            fileUnZipData.set(FileUnzipData.FILE_TO_UNZIP, settings.<String>get(Settings.ZIP_PATH));
            fileUnZipData.set(FileUnzipData.UNZIP_FILE_PATH, settings.<String>get(Settings.DEPLOY_PATH));
            Application.getFileUnZipper().UnZipFile(fileUnZipData);
        }
    }
}
