/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.negod.negoddeployer.panels;

import com.negod.genericlibrary.dto.Dto;
import com.negod.swinglibrary.commandpromt.CmdExecuter.CmdExecuterData;
import com.negod.swinglibrary.controller.Application;
import com.negod.swinglibrary.controller.events.EventObserver;
import com.negod.swinglibrary.controller.events.NegodEvent;
import com.negod.swinglibrary.controller.events.global.CmdExecuterEvent;
import com.negod.swinglibrary.controller.events.global.ZipFileEvent;
import com.negod.swinglibrary.filehandler.FileUnZipper.FileUnzipData;

/**
 *
 * @author jojoha
 */
public class CmdOutputPanel extends javax.swing.JPanel implements EventObserver {

    private final static String newline = "\n";

    /**
     * Creates new form CmdOutputPanel
     */
    public CmdOutputPanel() {
        initComponents();
    }

    public void addLine(String line) {
        jTextArea1.append(line + newline);
    }

    public void clearText() {
        jTextArea1.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setBackground(new java.awt.Color(255, 255, 255));

        jButton1.setText("C.L.E.A.R  - O.U.T.P.U.T");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(0, 0, 0));
        jTextArea1.setColumns(20);
        jTextArea1.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 685, Short.MAX_VALUE)
            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jTextArea1.setText("");
    }//GEN-LAST:event_jButton1ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void registerAsObserver() {
        Application.getEvents().addObserver(this);
    }

    public void update(NegodEvent event) {
        if (event.equalsEvent(CmdExecuterEvent.NEW_LINE)) {
            Dto<CmdExecuterData> dto = event.getValues();
            addLine(dto.<String>get(CmdExecuterData.LINE));
        } else if (event.equalsEvent(ZipFileEvent.FILE_UNZIPPING_IN_PROGRESS)) {
            Dto<FileUnzipData> dto = event.getValues();
            addLine(dto.<String>get(FileUnzipData.MESSAGE));
        } else if (event.equalsEvent(ZipFileEvent.FILE_UNZIPPED_SUCCESS)) {
            Dto<FileUnzipData> dto = event.getValues();
            addLine(dto.<String>get(FileUnzipData.MESSAGE));
        } else if (event.equalsEvent(ZipFileEvent.FILE_UNZIPPED_FAILURE)) {
            Dto<FileUnzipData> dto = event.getValues();
            addLine(dto.<String>get(FileUnzipData.MESSAGE));
        }
    }
}
